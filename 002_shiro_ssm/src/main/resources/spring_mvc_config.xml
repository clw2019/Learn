<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--  注解扫描  -->
    <!-- 告知springmvc  哪些包中 存在 被注解的类
         use-default-filters="false"  遇到到 @Controller  @Service  @Repository  @Component类，都会忽略
    -->
    <context:component-scan base-package="com.clw" use-default-filters="false">
        <!-- 只扫描  有@Controller注解的类 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 注册注解开发驱动,即开启Spring框架注解支持 -->
    <mvc:annotation-driven />

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <bean class="com.clw.resolver.MyExceptionResolver" />

    <!-- 开启shiro的注解配置,调用工厂中 Initialization 类型组件的 init 方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <!-- 自动代理生成器，等价于aop:config ,二者取其一 -->
<!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />-->
    <!-- springMVC工厂启动时，如果发现了此配置，会在当前工厂中 多创建一个Bean(后处理器)，用来定制代理Controller层 -->
    <aop:config />
    <!-- 在此bean的构建过程中，初始化了一些额外功能和piontcut
     interceptors.add(new RoleAnnotationMethodInterceptor(resolver));
                          @RequiresRoles
     interceptors.add(new PermissionAnnotationMethodInterceptor(resolver));
                          @RequiresPermissions
     interceptors.add(new AuthenticatedAnnotationMethodInterceptor(resolver));
                          @RequiresAuthentication
     interceptors.add(new UserAnnotationMethodInterceptor(resolver));
                          @RequiresUser
     interceptors.add(new GuestAnnotationMethodInterceptor(resolver));
                          @RequiresGuest
    -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
</beans>